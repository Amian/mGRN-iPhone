//
// Prefix header for all source files of the 'mGRN-iPhone' target in the 'mGRN-iPhone' project
//

#import <Availability.h>

#ifndef __IPHONE_5_0
#warning "This project uses features only available in iOS SDK 5.0 and later."
#endif

#ifdef __OBJC__
    #import <UIKit/UIKit.h>
    #import <Foundation/Foundation.h>
    #import <CoreData/CoreData.h>
#endif

#pragma mark - Fixed Values

#define GRNRole @""
#define GRNAppName @"mgrn"

#define GRNLightBlueColour [UIColor colorWithRed:20.0/255 green:168.0/255 blue:254.0/255 alpha:1.0]
#define GRNDarkBlueColour [UIColor colorWithRed:13.0/255 green:44.0/255 blue:75.0/255 alpha:1.0]

#define KeyBoardHeightForiPhoneInPortraitMode 216.0
#pragma mark - Keys

#define KeySystemURI @"KeySystemURI"
#define KeyDomainName @"domain"
#define KeyUserID @"userid"
#define KeyPassword @"password"
#define KeyRole @"Role"
#define KeyKCO @"kco"
#define KeyTransactionID @"transactionid"
#define KeySessionEndDate @"sessionenddate"

#define KeyServicePort @"serviceport"
#define KeyServiceServer @"serviceserver"
#define KeyServiceName @"serviceName"

#define KeyImage1 @"i1"
#define KeyImage2 @"i2"
#define KeyImage3 @"i3"
#define KeySignature @"s1"

#define ChangeScrollViewContentOffsetNotification @"ChangeScrollViewContentOffsetNotification"

#include <assert.h>
#include <stdbool.h>
#include <sys/types.h>
#include <unistd.h>
#include <sys/sysctl.h>

#pragma Mark - Check if debugging

static bool AmIBeingDebugged(void)
// Returns true if the current process is being debugged (either
// running under the debugger or has a debugger attached post facto).
{
    int                 junk;
    int                 mib[4];
    struct kinfo_proc   info;
    size_t              size;
    
    // Initialize the flags so that, if sysctl fails for some bizarre
    // reason, we get a predictable result.
    
    info.kp_proc.p_flag = 0;
    
    // Initialize mib, which tells sysctl the info we want, in this case
    // we're looking for information about a specific process ID.
    
    mib[0] = CTL_KERN;
    mib[1] = KERN_PROC;
    mib[2] = KERN_PROC_PID;
    mib[3] = getpid();
    
    // Call sysctl.
    
    size = sizeof(info);
    junk = sysctl(mib, sizeof(mib) / sizeof(*mib), &info, &size, NULL, 0);
    assert(junk == 0);
    
    // We're being debugged if the P_TRACED flag is set.
    
    return ( (info.kp_proc.p_flag & P_TRACED) != 0 );
}